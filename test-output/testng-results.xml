<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="21" passed="17" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-04-13T22:12:03 MSK" name="Parallel Suite" finished-at="2020-04-13T22:12:03 MSK" duration-ms="159">
    <groups>
      <group name="boolean">
        <method signature="IsNegativeCalcTest.isNegativeOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsNegativeCalcTest@7c0c77c7]" name="isNegativeOfLongValue" class="com.epam.testng.tests.IsNegativeCalcTest"/>
        <method signature="IsPositiveCalcTest.isPositiveOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsPositiveCalcTest@48aaecc3]" name="isPositiveOfLongValue" class="com.epam.testng.tests.IsPositiveCalcTest"/>
      </group> <!-- boolean -->
      <group name="doubleValues">
        <method signature="CosOfDoubleValueCalcTest.cosOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.CosOfDoubleValueCalcTest@3cc2931c]" name="cosOfDoubleValue" class="com.epam.testng.tests.CosOfDoubleValueCalcTest"/>
        <method signature="CtgOfDoubleValueCalcTest.ctgOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.CtgOfDoubleValueCalcTest@20d28811]" name="ctgOfDoubleValue" class="com.epam.testng.tests.CtgOfDoubleValueCalcTest"/>
        <method signature="DivOfDoubleValuesCalcTest.divOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.DivOfDoubleValuesCalcTest@3967e60c]" name="divOfTwoDoubleValues" class="com.epam.testng.tests.DivOfDoubleValuesCalcTest"/>
        <method signature="MultOfDoubleValuesCalcTest.multOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.MultOfDoubleValuesCalcTest@7adda9cc]" name="multOfTwoDoubleValues" class="com.epam.testng.tests.MultOfDoubleValuesCalcTest"/>
        <method signature="PowOfDoubleValuesCalcTest.powOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.PowOfDoubleValuesCalcTest@433d61fb]" name="powOfTwoDoubleValues" class="com.epam.testng.tests.PowOfDoubleValuesCalcTest"/>
        <method signature="SinOfDoubleValueCalcTest.sinOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.SinOfDoubleValueCalcTest@5c909414]" name="sinOfDoubleValue" class="com.epam.testng.tests.SinOfDoubleValueCalcTest"/>
        <method signature="SqrtOfDoubleValueCalcTest.sqrtOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.SqrtOfDoubleValueCalcTest@4b14c583]" name="sqrtOfDoubleValue" class="com.epam.testng.tests.SqrtOfDoubleValueCalcTest"/>
        <method signature="SubOfDoubleValuesCalcTest.subOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.SubOfDoubleValuesCalcTest@65466a6a]" name="subOfTwoDoubleValues" class="com.epam.testng.tests.SubOfDoubleValuesCalcTest"/>
        <method signature="SumOfDoubleValuesCalcTest.sumOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.SumOfDoubleValuesCalcTest@1534f01b]" name="sumOfTwoDoubleValues" class="com.epam.testng.tests.SumOfDoubleValuesCalcTest"/>
        <method signature="TgOfDoubleValueCalcTest.tgOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.TgOfDoubleValueCalcTest@2ea227af]" name="tgOfDoubleValue" class="com.epam.testng.tests.TgOfDoubleValueCalcTest"/>
      </group> <!-- doubleValues -->
      <group name="longValues">
        <method signature="DivOfLongValuesCalcTest.divOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.DivOfLongValuesCalcTest@60d8c9b7]" name="divOfTwoLongValues" class="com.epam.testng.tests.DivOfLongValuesCalcTest"/>
        <method signature="MultOfLongValuesCalcTest.multOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.MultOfLongValuesCalcTest@5cee5251]" name="multOfTwoLongValues" class="com.epam.testng.tests.MultOfLongValuesCalcTest"/>
        <method signature="SubOfLongValuesCalcTest.subOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.SubOfLongValuesCalcTest@4ddced80]" name="subOfTwoLongValues" class="com.epam.testng.tests.SubOfLongValuesCalcTest"/>
        <method signature="SumOfLongValuesCalcTest.sumOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.SumOfLongValuesCalcTest@78e117e3]" name="sumOfTwoLongValues" class="com.epam.testng.tests.SumOfLongValuesCalcTest"/>
      </group> <!-- longValues -->
    </groups>
    <test started-at="2020-04-13T22:12:03 MSK" name="Test" finished-at="2020-04-13T22:12:03 MSK" duration-ms="159">
      <class name="com.epam.testng.tests.DivOfDoubleValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.DivOfDoubleValuesCalcTest@3967e60c]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="divOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.DivOfDoubleValuesCalcTest@3967e60c]" started-at="2020-04-13T22:12:03 MSK" name="divOfTwoDoubleValues" data-provider="DivOfTwoDoubleValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divOfTwoDoubleValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.DivOfDoubleValuesCalcTest@3967e60c]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.DivOfDoubleValuesCalcTest -->
      <class name="com.epam.testng.tests.DivOfLongValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.DivOfLongValuesCalcTest@60d8c9b7]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="divOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.DivOfLongValuesCalcTest@60d8c9b7]" started-at="2020-04-13T22:12:03 MSK" name="divOfTwoLongValues" data-provider="DivOfTwoLongValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="2" status="FAIL">
          <exception class="org.testng.internal.reflect.MethodMatcherException">
            <message>
              <![CDATA[
[public void com.epam.testng.tests.DivOfLongValuesCalcTest.divOfTwoLongValues(long,long,long)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: divOfTwoLongValues([Parameter{index=0, type=long, declaredAnnotations=[]}, Parameter{index=1, type=long, declaredAnnotations=[]}, Parameter{index=2, type=long, declaredAnnotations=[]}])
Arguments: [(java.lang.Long) 4,(java.lang.Integer) 0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.reflect.MethodMatcherException: 
[public void com.epam.testng.tests.DivOfLongValuesCalcTest.divOfTwoLongValues(long,long,long)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: divOfTwoLongValues([Parameter{index=0, type=long, declaredAnnotations=[]}, Parameter{index=1, type=long, declaredAnnotations=[]}, Parameter{index=2, type=long, declaredAnnotations=[]}])
Arguments: [(java.lang.Long) 4,(java.lang.Integer) 0]
at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:43)
at org.testng.internal.Parameters.injectParameters(Parameters.java:925)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:34)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.reflect.MethodMatcherException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divOfTwoLongValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.DivOfLongValuesCalcTest@60d8c9b7]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.DivOfLongValuesCalcTest -->
      <class name="com.epam.testng.tests.SubOfDoubleValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.SubOfDoubleValuesCalcTest@65466a6a]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="subOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.SubOfDoubleValuesCalcTest@65466a6a]" started-at="2020-04-13T22:12:03 MSK" name="subOfTwoDoubleValues" data-provider="SubOfTwoDoubleValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.0458]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15.72993]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-5.68413]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subOfTwoDoubleValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.SubOfDoubleValuesCalcTest@65466a6a]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.SubOfDoubleValuesCalcTest -->
      <class name="com.epam.testng.tests.SubOfLongValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.SubOfLongValuesCalcTest@4ddced80]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="subOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.SubOfLongValuesCalcTest@4ddced80]" started-at="2020-04-13T22:12:03 MSK" name="subOfTwoLongValues" data-provider="SubOfTwoLongValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subOfTwoLongValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.SubOfLongValuesCalcTest@4ddced80]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.SubOfLongValuesCalcTest -->
      <class name="com.epam.testng.tests.TgOfDoubleValueCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.TgOfDoubleValueCalcTest@2ea227af]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="tgOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.TgOfDoubleValueCalcTest@2ea227af]" started-at="2020-04-13T22:12:03 MSK" name="tgOfDoubleValue" data-provider="TgOfDoubleValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[360.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-3.3801404139609623]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-3.3801404139609623] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-3.3801404139609623] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at com.epam.testng.tests.TgOfDoubleValueCalcTest.tgOfDoubleValue(TgOfDoubleValueCalcTest.java:11)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tgOfDoubleValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.TgOfDoubleValueCalcTest@2ea227af]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.TgOfDoubleValueCalcTest -->
      <class name="com.epam.testng.tests.SumOfLongValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.SumOfLongValuesCalcTest@78e117e3]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="sumOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.SumOfLongValuesCalcTest@78e117e3]" started-at="2020-04-13T22:12:03 MSK" name="sumOfTwoLongValues" data-provider="SumOfTwoLongValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[25]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumOfTwoLongValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.SumOfLongValuesCalcTest@78e117e3]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.SumOfLongValuesCalcTest -->
      <class name="com.epam.testng.tests.SumOfDoubleValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.SumOfDoubleValuesCalcTest@1534f01b]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.SumOfDoubleValuesCalcTest@1534f01b]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method signature="sumOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.SumOfDoubleValuesCalcTest@1534f01b]" started-at="2020-04-13T22:12:03 MSK" name="sumOfTwoDoubleValues" data-provider="SumOfTwoDoubleValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumOfTwoDoubleValues -->
      </class> <!-- com.epam.testng.tests.SumOfDoubleValuesCalcTest -->
      <class name="com.epam.testng.tests.MultOfLongValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.MultOfLongValuesCalcTest@5cee5251]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="multOfTwoLongValues(long, long, long)[pri:0, instance:com.epam.testng.tests.MultOfLongValuesCalcTest@5cee5251]" started-at="2020-04-13T22:12:03 MSK" name="multOfTwoLongValues" data-provider="MultOfTwoLongValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[150]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multOfTwoLongValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.MultOfLongValuesCalcTest@5cee5251]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.MultOfLongValuesCalcTest -->
      <class name="com.epam.testng.tests.IsPositiveCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.IsPositiveCalcTest@48aaecc3]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="isPositiveOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsPositiveCalcTest@48aaecc3]" started-at="2020-04-13T22:12:03 MSK" name="isPositiveOfLongValue" data-provider="IsPositiveOfLongValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveOfLongValue -->
        <test-method signature="isPositiveOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsPositiveCalcTest@48aaecc3]" started-at="2020-04-13T22:12:03 MSK" name="isPositiveOfLongValue" data-provider="IsPositiveOfLongValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveOfLongValue -->
        <test-method signature="isPositiveOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsPositiveCalcTest@48aaecc3]" started-at="2020-04-13T22:12:03 MSK" name="isPositiveOfLongValue" data-provider="IsPositiveOfLongValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveOfLongValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.IsPositiveCalcTest@48aaecc3]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.IsPositiveCalcTest -->
      <class name="com.epam.testng.tests.MultOfDoubleValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.MultOfDoubleValuesCalcTest@7adda9cc]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="multOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.MultOfDoubleValuesCalcTest@7adda9cc]" started-at="2020-04-13T22:12:03 MSK" name="multOfTwoDoubleValues" data-provider="MultOfTwoDoubleValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.846]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[37.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multOfTwoDoubleValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.MultOfDoubleValuesCalcTest@7adda9cc]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.MultOfDoubleValuesCalcTest -->
      <class name="com.epam.testng.tests.SqrtOfDoubleValueCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.SqrtOfDoubleValueCalcTest@4b14c583]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="sqrtOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.SqrtOfDoubleValueCalcTest@4b14c583]" started-at="2020-04-13T22:12:03 MSK" name="sqrtOfDoubleValue" data-provider="SqrtOfDoubleValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[16.4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.049691346263317]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtOfDoubleValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.SqrtOfDoubleValueCalcTest@4b14c583]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.SqrtOfDoubleValueCalcTest -->
      <class name="com.epam.testng.tests.PowOfDoubleValuesCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.PowOfDoubleValuesCalcTest@433d61fb]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="powOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.PowOfDoubleValuesCalcTest@433d61fb]" started-at="2020-04-13T22:12:03 MSK" name="powOfTwoDoubleValues" data-provider="PowOfTwoDoubleValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3.375]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- powOfTwoDoubleValues -->
        <test-method signature="powOfTwoDoubleValues(double, double, double)[pri:0, instance:com.epam.testng.tests.PowOfDoubleValuesCalcTest@433d61fb]" started-at="2020-04-13T22:12:03 MSK" name="powOfTwoDoubleValues" data-provider="PowOfTwoDoubleValues" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1.5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-3.375]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- powOfTwoDoubleValues -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.PowOfDoubleValuesCalcTest@433d61fb]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.PowOfDoubleValuesCalcTest -->
      <class name="com.epam.testng.tests.CtgOfDoubleValueCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.CtgOfDoubleValueCalcTest@20d28811]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="ctgOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.CtgOfDoubleValueCalcTest@20d28811]" started-at="2020-04-13T22:12:03 MSK" name="ctgOfDoubleValue" data-provider="CtgOfDoubleValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="8" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.00182542851]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [1.00182542851] but found [0.9981778976111987]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [1.00182542851] but found [0.9981778976111987]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at com.epam.testng.tests.CtgOfDoubleValueCalcTest.ctgOfDoubleValue(CtgOfDoubleValueCalcTest.java:11)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ctgOfDoubleValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.CtgOfDoubleValueCalcTest@20d28811]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.CtgOfDoubleValueCalcTest -->
      <class name="com.epam.testng.tests.IsNegativeCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.IsNegativeCalcTest@7c0c77c7]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="isNegativeOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsNegativeCalcTest@7c0c77c7]" started-at="2020-04-13T22:12:03 MSK" name="isNegativeOfLongValue" data-provider="IsNegativeOfLongValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeOfLongValue -->
        <test-method signature="isNegativeOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsNegativeCalcTest@7c0c77c7]" started-at="2020-04-13T22:12:03 MSK" name="isNegativeOfLongValue" data-provider="IsNegativeOfLongValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeOfLongValue -->
        <test-method signature="isNegativeOfLongValue(long, boolean)[pri:0, instance:com.epam.testng.tests.IsNegativeCalcTest@7c0c77c7]" started-at="2020-04-13T22:12:03 MSK" name="isNegativeOfLongValue" data-provider="IsNegativeOfLongValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeOfLongValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.IsNegativeCalcTest@7c0c77c7]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.IsNegativeCalcTest -->
      <class name="com.epam.testng.tests.CosOfDoubleValueCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.CosOfDoubleValueCalcTest@3cc2931c]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="cosOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.CosOfDoubleValueCalcTest@3cc2931c]" started-at="2020-04-13T22:12:03 MSK" name="cosOfDoubleValue" data-provider="CosOfDoubleValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="8" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[360.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.283691091486527]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.283691091486527] but found [0.9589157234143065]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.283691091486527] but found [0.9589157234143065]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at com.epam.testng.tests.CosOfDoubleValueCalcTest.cosOfDoubleValue(CosOfDoubleValueCalcTest.java:11)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosOfDoubleValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.CosOfDoubleValueCalcTest@3cc2931c]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.CosOfDoubleValueCalcTest -->
      <class name="com.epam.testng.tests.SinOfDoubleValueCalcTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.epam.testng.tests.SinOfDoubleValueCalcTest@5c909414]" started-at="2020-04-13T22:12:03 MSK" name="setUp" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="sinOfDoubleValue(double, double)[pri:0, instance:com.epam.testng.tests.SinOfDoubleValueCalcTest@5c909414]" started-at="2020-04-13T22:12:03 MSK" name="sinOfDoubleValue" data-provider="SinOfDoubleValue" finished-at="2020-04-13T22:12:03 MSK" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[360.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.9589157234143065]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinOfDoubleValue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.epam.testng.tests.SinOfDoubleValueCalcTest@5c909414]" started-at="2020-04-13T22:12:03 MSK" name="tearDown" finished-at="2020-04-13T22:12:03 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.epam.testng.tests.SinOfDoubleValueCalcTest -->
    </test> <!-- Test -->
  </suite> <!-- Parallel Suite -->
  <suite started-at="2020-04-13T22:12:04 MSK" name="NegativeSuite" finished-at="2020-04-13T22:12:04 MSK" duration-ms="0">
    <groups>
    </groups>
  </suite> <!-- NegativeSuite -->
</testng-results>
